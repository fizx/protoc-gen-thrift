// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 4, 9, 16, 40, 30, 939545080, time.UTC),
		},
		"/baseplate.thrift": &vfsgen۰CompressedFileInfo{
			name:             "baseplate.thrift",
			modTime:          time.Date(2020, 4, 4, 21, 35, 5, 339332972, time.UTC),
			uncompressedSize: 2033,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x55\xcb\x6e\x1c\x37\x10\xbc\xf3\x2b\x0a\xbe\xc4\x5e\xc8\x23\xc4\x09\x72\x90\x4f\x4e\x9c\x00\x02\x72\x92\x75\xf1\x49\xe0\x92\xbd\x4b\x46\x33\xec\x09\xd9\xa3\xd9\x85\x91\x7f\x0f\x48\x0e\xf7\x25\x29\xb9\x06\x39\x8d\xc4\x47\x57\x75\x55\x35\x37\xe8\x81\xd2\xa8\x0d\x61\xdc\x63\xad\x13\x8d\xbd\x16\xea\xc4\x45\xbf\x11\x75\xdc\xdd\x32\x22\x59\xeb\xa5\x3b\x1c\x3a\xd9\xfd\x43\x3f\x69\x18\x1e\xba\x67\x67\xd4\xf5\x6a\x85\x7b\x47\xa5\x36\x36\x1c\xa1\xc3\x09\xd0\xfb\xfc\x97\x45\xa2\xf8\xe4\x0d\x75\x4a\x7d\xe5\x29\xb6\x7f\x91\x1c\x4f\xbd\x85\x0f\x8e\xa2\x17\x6c\x22\x0f\x10\xe7\x13\x38\x10\x12\x43\x9c\x96\x0c\x3b\x70\x80\x30\xf7\x09\x46\x07\xf8\x20\x14\xb5\x11\x35\x7b\x71\x05\x8e\x76\x23\x19\x21\x5b\xb7\x36\xda\x50\xea\x94\x5a\x5d\xab\x06\xf4\x73\xe3\xf3\x65\x59\xf8\xa6\x00\x20\x73\xbf\x23\x99\x62\xc0\xec\x48\x1c\x45\x70\x44\x60\x81\x38\x3a\xb0\xf4\x09\x8e\x74\x2f\x6e\xdf\xa9\x72\x2d\xb7\x5b\x57\x8c\x23\xf3\x48\x11\x6f\x8f\xca\xe6\x5b\x14\xbb\x93\xfd\x77\x0b\xbf\x54\x7b\xa3\x60\x47\xf6\x41\x20\x5c\xaa\xd1\xce\x27\xc9\xdd\x7a\x29\xed\x59\x12\x8a\x83\x0f\x84\xfd\x89\x56\xdf\x35\x12\x07\x0e\x3e\x35\xfd\x62\x6d\xe1\x3e\x4e\x04\xbf\x79\x8d\x3b\x6e\x2f\xb7\x4a\xa1\x29\x2c\x07\xae\x1a\x81\xa5\xdc\x6f\xba\x4f\x94\xf5\x88\xda\x27\x82\x0e\xa0\x9d\xa1\x51\x3c\x87\x85\xc3\xea\xba\x7c\xd6\xcc\x3d\x7c\x7a\x58\xea\xbc\x7d\x77\xa5\xfe\x52\xc7\x60\x18\x1e\x46\x0e\x14\x24\x81\x2b\x83\xbb\x12\x22\xfc\xce\xb7\x9f\x61\x98\x1f\x3d\x55\xa7\x67\xc2\xac\x8b\x30\x18\x23\x8f\xbc\xd5\x42\x58\x93\xcc\x44\xa1\x59\x99\x8d\x2d\xbd\x0f\x6c\x29\xc3\x42\x1f\x11\x1a\xc0\x9b\x5f\xed\x96\xde\xdf\xd1\x9f\x13\x25\x79\x93\x15\xb0\x14\x3b\xe0\x2b\x4f\x4d\xb3\x6c\x72\x20\xb2\xd9\x85\x16\x28\x94\x40\xc9\xb1\xba\xf5\x91\x8c\xf4\xfb\x2b\xac\x27\x41\xd4\x25\x21\xe2\x22\x4f\x5b\x57\x80\x32\xce\x02\xf3\x0b\x07\xa1\x9d\xa8\x43\x04\x73\x0f\x4f\xde\x92\xc5\xfa\x74\xf2\x6a\x2e\x25\x4e\x26\x2b\xe0\xed\x49\x14\xb3\x5a\xb7\x9f\x5b\x13\x27\xf2\x9c\xeb\xfd\xfd\x0d\x92\x44\x1f\xb6\xf0\xf6\xe3\xd9\x65\xf1\x03\xe5\x24\x87\xcb\x02\x98\x75\x82\x89\xa4\xeb\x90\x80\x46\x36\x0e\x83\xef\x7b\x9f\xc8\x70\xb0\xe9\x1c\xe2\xc3\x0d\xfc\x4f\x3f\xb6\x1b\x0f\x43\xfa\x98\x2d\xfd\x57\x47\xbf\x50\x4a\x3e\xcf\x6a\xd4\x65\x2c\x5e\x36\x57\x3d\x33\x17\xff\x47\x73\x9b\x18\xaf\xf9\xfb\xb2\x58\xff\x64\x75\xb5\xe0\x13\xa2\x9e\xa1\x27\x71\x14\xc4\x1b\x2d\xa5\x08\x3f\x52\x80\x4e\xcb\xf0\x56\x5e\x19\xe5\xe2\xdc\xf1\x21\x5e\x5d\x2b\xd9\x8f\x64\x69\xd3\x20\x3e\x9d\x1d\xbd\xcf\x15\xab\xe7\xb9\x7b\xed\x03\xc5\x45\xb9\xfc\xca\x37\x81\x9a\x11\x30\x55\xa2\xe6\x87\x52\x87\x37\x17\xb3\xef\xfb\x4c\x84\x07\x9d\xab\xf7\xfd\x1e\xa3\x8e\x89\xaa\x1b\xcb\xab\xff\x8a\xb1\xd0\xc1\xaa\x45\xec\x84\xf6\xfa\x17\x0b\x6a\xac\xa2\x1e\x97\x87\xf5\xbe\xfc\xa6\x55\x8e\xff\xc1\x3c\x34\xa1\xbe\x35\x67\xcb\xf4\xf7\xdc\x86\xf8\xc3\xcd\x21\x12\xa9\x7e\xeb\xfa\x0f\x37\x2f\x39\x73\x61\xec\x43\x09\x40\x8e\xc8\xdf\x01\x00\x00\xff\xff\xe6\x75\x5e\x65\xf1\x07\x00\x00"),
		},
		"/gen.go": &vfsgen۰CompressedFileInfo{
			name:             "gen.go",
			modTime:          time.Date(2020, 4, 9, 17, 7, 43, 439353610, time.UTC),
			uncompressedSize: 3678,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x51\x8f\x9b\x38\x10\x7e\x2e\xbf\x62\x94\x4a\x2b\xbc\x42\x20\xb5\x55\x1f\xf6\x94\x87\xd3\xe9\x74\xd7\xb7\xd3\x75\xdf\xaa\x2d\x62\xd9\x21\xb1\x02\x36\x35\x26\x4a\x64\xf1\xdf\x4f\x36\xb6\x31\x09\x49\x7a\xdb\x7d\x09\xf1\x78\xe6\x9b\xf9\xbe\x7c\x18\xd2\x16\xe5\xae\xd8\x20\x14\x2f\x45\x2b\x51\x44\x11\x6d\x5a\x2e\x24\xc4\x11\xc0\xaa\xe4\x4c\xe2\x41\xae\xf4\xf7\x0d\x95\xdb\xfe\x39\x2d\x79\x93\x6d\x78\x5d\xb0\x4d\xd6\x0a\x2e\xf9\x73\x5f\x65\xad\x3c\xb6\xd8\x65\xd8\xb4\xf2\xb8\x8a\xa0\x85\x95\x52\x66\xb3\xdd\x6d\x86\x61\x15\x81\xd4\x11\xb9\x15\xb4\x92\x36\x44\xa2\xa8\xea\x59\x09\x9d\x14\x94\x6d\x1e\xf9\x3f\x3a\x3d\xee\xec\x9a\xd8\x2b\xa8\x08\x40\xa0\xec\x05\x83\x2e\x1a\xe6\x25\x8f\x06\xef\xe7\x6a\xe8\xe7\x4f\x53\x0f\xca\xe4\xe7\x4f\x64\xbc\x5c\xce\xf6\xf0\xb7\xd3\x3f\x7e\x98\x81\x7f\xfc\x40\xc6\xcb\xe5\xec\x10\xfc\x7a\xfa\x33\xe7\xf5\x84\xae\x57\xc4\x7c\x5e\x49\xf6\xe0\x97\xb3\xad\xfa\x2f\xbc\x7f\xae\x71\x82\xaf\x6a\x5e\x18\xb2\xf6\xcb\x62\x13\x57\xe4\xdb\xdc\xaa\x8a\x94\x7a\xdf\x14\x6d\x37\x58\x00\xa5\xba\xa2\xc2\x9c\x15\x0d\x0e\x83\x6b\x4e\x19\x34\x45\xfb\x4d\xa9\x1a\x2b\x99\x8f\x5e\x19\x86\x27\xa5\x04\xdd\x6c\xa7\x00\x09\xb3\x8c\xc7\x82\x24\xbb\x36\xfd\x69\x05\x94\xc1\x7a\x0d\x8c\x8e\xec\xfd\x48\x8c\xd6\x11\xc0\x10\x01\xf0\x5e\xc2\xc3\x1a\x9a\x62\x87\xf1\x6d\x58\x12\x01\x54\x5c\xc0\x2e\x81\xbd\x2e\x13\x05\xdb\xa0\x6e\x32\xa2\xf3\x5e\xfa\xe9\x8f\x6d\xc0\x6c\x47\x9e\x60\x0d\x9e\xc8\x6c\x6f\x4f\xec\x28\x76\x36\xde\x4b\x2d\xd8\x92\x4c\x56\xee\xb9\x4e\x97\x46\xfd\x29\x2d\x7f\x55\xa7\xcb\xc0\xff\x5f\x2a\xcb\x6e\x59\x2b\xbb\x79\x41\x2c\xa5\x32\xeb\x2e\x6d\xb4\x9a\x76\xd2\x3b\x4d\x2f\x72\xab\xe3\x38\x9c\xc5\xcc\x03\xdb\x7d\x7b\x72\x67\x93\xdd\x24\x26\x64\xa4\xb4\x91\x57\x29\x75\x0a\x92\x40\x8d\x2c\xa6\x8c\x38\x75\x68\x02\x78\x41\x1d\x3a\xca\x70\x3e\xb8\x9b\x1b\xaf\x18\xe7\x1a\xeb\xc9\x45\xa7\xe3\x91\x73\x21\x5e\x4d\x7b\x86\xf2\x46\xbc\xed\xe4\xcb\xc4\xb3\x4c\xa9\x74\x18\xb4\x17\x9c\x01\xcc\xa9\x83\x5d\x57\x6c\xf0\xd1\x40\xe8\xee\xe3\x7d\x75\x76\xf2\xdc\xcb\xd4\x45\x09\xdc\xb7\x7e\x61\x27\x5b\x90\xe0\x44\x84\x71\x24\x2f\xc4\xdd\x04\xa1\xc6\x0d\xa5\xde\x57\x14\xeb\x97\x61\xb0\xe5\x4a\x7d\xa7\x5d\xce\x19\xe6\xbc\xf2\x41\x03\x90\x2a\x55\x16\x0d\xd6\xf6\xce\xbf\x61\x04\xca\x52\xa5\xba\x16\x4b\x5a\xd4\x79\x58\x47\x7c\xa3\xec\xb4\x91\x52\x99\x1b\xc6\x0d\xc7\x19\xf2\xaa\x73\x01\x13\xda\x17\x75\x8f\xc1\x68\x46\x85\x54\xa9\x1d\x1e\x87\xe1\x2b\xd6\x58\x4a\xca\x8d\x2c\x93\x7a\x76\x37\x57\x8a\x32\x86\x22\x9f\xc9\x18\x32\x34\x69\x30\x53\xea\x5a\x91\x1e\x28\xdc\x7c\xf0\xeb\x05\x35\xc2\x44\x92\x04\x28\x13\x97\xe9\x57\xc8\x42\x9a\x4a\x65\x73\x21\x02\x93\x8d\x45\x27\x0e\x9a\x6e\xa7\xc0\x35\x24\xf4\xd3\xab\x2d\x24\x7f\xcd\x42\x4b\x96\xb8\x75\x6f\x19\xf5\x5a\x81\x15\x3d\xe8\x9f\xf2\x0d\xdc\x74\xcd\x4c\x87\x04\xf8\x4e\x53\xa5\x2c\xfd\x0b\xa5\xf5\x44\x4c\xd2\xf8\xfe\xa2\x29\xc8\x6f\xba\xe6\x82\x9d\x02\x4f\xde\xb4\x64\xf4\xee\x5d\x58\x3f\x33\xde\xfa\xcc\x5c\x56\x9f\xc3\xa9\xb9\x22\x0b\x32\x8c\x97\xd7\x9a\xca\x3c\xc2\x66\x47\x95\x39\xbd\x3a\x14\x7b\x5a\xe2\x58\xa6\x47\xf1\xc6\xfb\x7d\x7c\x59\xff\xd2\xb4\xb5\x7e\xeb\xed\x4b\xe9\x6c\xa6\xa7\x83\x49\xbe\xaf\x28\xf6\x28\x4c\x1b\x67\xde\x98\xea\xaa\x05\x24\x02\x5f\xba\xbf\xb1\xa8\xe5\xf6\x18\x97\xf2\x00\xf6\xe5\x3f\xfd\x63\xbc\x12\x88\xf5\x9b\x64\x02\x28\x04\x17\xc4\x36\xcc\xcd\xda\xfc\x8a\x4d\x5b\xa7\xa6\x7f\x3a\xc3\x49\xe0\xce\xfc\x31\x48\xff\xd4\x9f\xca\x3a\xc9\x6a\xa0\x6b\xc7\x9b\xc2\xe0\x38\x3d\x8c\x65\x1a\x94\x5b\xfe\xe2\x45\xfc\xbe\x35\x98\x79\xb9\xc5\x72\x67\xa3\x33\x42\x56\xae\x7c\x81\x98\x63\xbb\xc4\x2b\x01\x81\x3f\xc6\x3b\x96\xb2\xb6\x97\x8f\xf6\x69\x18\x9b\x10\xef\xa5\x8f\x9d\x50\x37\xde\x59\xa2\x1f\x76\x4b\x60\x06\xeb\xce\x29\x81\x3f\x08\x99\x9f\x02\xf3\x5e\xde\x73\xbc\x97\xc4\x69\xe3\x8e\x08\xa5\xb2\x33\x31\x8c\x85\xac\x60\xa7\xe7\x94\xd5\x22\xee\x8c\x1b\xce\xec\x41\x40\xa6\xff\x16\x6c\xe7\xfe\x3c\xf9\x91\xee\x96\xfc\xe6\xc8\x1b\xae\x0f\x30\x62\x26\x7e\x3a\xf3\x0c\xf6\xce\xfd\x2f\x00\x00\xff\xff\xb4\x3d\xb9\x8b\x5e\x0e\x00\x00"),
		},
		"/gen.thrift": &vfsgen۰CompressedFileInfo{
			name:             "gen.thrift",
			modTime:          time.Date(2020, 4, 9, 16, 40, 30, 938796852, time.UTC),
			uncompressedSize: 654,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x6f\xe2\x30\x10\x85\xef\xfe\x15\x23\x22\xad\x76\xa5\x6d\xa2\x1e\xa1\xa7\x56\xf4\xd0\x4b\x39\xc0\xb9\xc8\x24\x13\x62\x91\xd8\xd4\x1e\xa3\xa2\x91\xff\x7b\x95\xa4\xc4\xa6\x70\x88\x62\x8d\xfd\xbe\xf7\xde\x14\x05\x3c\x7b\x32\x0f\x7b\xd4\x68\x25\x61\x05\xb5\x35\x1d\x30\x6b\xd9\x61\x08\x90\xe7\x39\x2c\x57\xf0\xbe\xda\xc0\xeb\xf2\x6d\x23\x84\xd2\x65\xeb\x2b\x84\xd9\x4e\x3a\x3c\xb6\x92\x30\xa7\xc6\xaa\x9a\x66\x42\x30\x67\x0e\xed\x49\x95\x18\x82\x00\xf8\x39\x47\x18\x7e\x11\xea\xca\x41\x94\xbe\x5c\x4e\xeb\xcb\x5b\x01\x00\xc0\x9c\x75\x48\x8d\xa9\x06\xce\x38\xf9\x68\x50\xb6\xd4\x6c\xcb\x06\xcb\x43\x32\x37\x9e\x8e\x9e\x36\xe7\x63\xef\x30\x59\xfd\x7d\x5c\x00\xb3\xd2\xf1\xca\xe2\xa7\x47\x47\xff\x9e\x26\x65\x71\x87\xc8\x5c\x24\xce\x41\x30\x17\xb1\x92\x18\x72\x39\x27\xf7\x38\x42\x45\x2f\x18\xeb\x6f\xe9\x57\x02\x9e\x7c\xb2\x5a\x61\x1b\xab\xf4\x23\xed\xbb\x1d\xda\x10\xfa\x90\x7f\xee\x03\x92\x9c\xd7\x7a\xe6\xcc\x68\x34\xb5\x4b\x88\xf3\xf9\x7c\x31\x29\x99\x0f\x78\x1e\x48\xc3\x7f\x8d\x2d\x96\xa4\x8c\x4e\x88\x09\xa0\xff\xc4\x2d\x15\xb5\xef\x6e\x89\x31\xc2\x49\xb6\x1e\xaf\x3a\x29\xad\xd1\x6e\x47\xc1\xff\x68\x95\x3e\x1c\x17\x16\xdd\x87\x6d\x27\xfb\xfc\x0e\x00\x00\xff\xff\xf4\xc8\x42\xfe\x8e\x02\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/baseplate.thrift"].(os.FileInfo),
		fs["/gen.go"].(os.FileInfo),
		fs["/gen.thrift"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
