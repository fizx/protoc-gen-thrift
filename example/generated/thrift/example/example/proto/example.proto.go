// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package proto

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/fizx/protoc-gen-thrift/example/generated/thrift/example/reddit/baseplate"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = baseplate.GoUnusedProtection__
type FeatureValue int64
const (
  FeatureValue_AsString FeatureValue = 0
  FeatureValue_AsInt FeatureValue = 1
  FeatureValue_AsFloat FeatureValue = 2
  FeatureValue_AsBool FeatureValue = 3
  FeatureValue_AsStringArray FeatureValue = 4
  FeatureValue_AsIntArray FeatureValue = 5
)

func (p FeatureValue) String() string {
  switch p {
  case FeatureValue_AsString: return "AsString"
  case FeatureValue_AsInt: return "AsInt"
  case FeatureValue_AsFloat: return "AsFloat"
  case FeatureValue_AsBool: return "AsBool"
  case FeatureValue_AsStringArray: return "AsStringArray"
  case FeatureValue_AsIntArray: return "AsIntArray"
  }
  return "<UNSET>"
}

func FeatureValueFromString(s string) (FeatureValue, error) {
  switch s {
  case "AsString": return FeatureValue_AsString, nil 
  case "AsInt": return FeatureValue_AsInt, nil 
  case "AsFloat": return FeatureValue_AsFloat, nil 
  case "AsBool": return FeatureValue_AsBool, nil 
  case "AsStringArray": return FeatureValue_AsStringArray, nil 
  case "AsIntArray": return FeatureValue_AsIntArray, nil 
  }
  return FeatureValue(0), fmt.Errorf("not a valid FeatureValue string")
}


func FeatureValuePtr(v FeatureValue) *FeatureValue { return &v }

func (p FeatureValue) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FeatureValue) UnmarshalText(text []byte) error {
q, err := FeatureValueFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FeatureValue) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FeatureValue(v)
return nil
}

func (p * FeatureValue) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Context
//  - Candidates
//  - Options
type RankingRequest struct {
  Context *Entity `thrift:"context,1" db:"context" json:"context"`
  Candidates []*Entity `thrift:"candidates,2" db:"candidates" json:"candidates"`
  Options *RequestOptions `thrift:"options,3" db:"options" json:"options"`
}

func NewRankingRequest() *RankingRequest {
  return &RankingRequest{}
}

var RankingRequest_Context_DEFAULT *Entity
func (p *RankingRequest) GetContext() *Entity {
  if !p.IsSetContext() {
    return RankingRequest_Context_DEFAULT
  }
return p.Context
}

func (p *RankingRequest) GetCandidates() []*Entity {
  return p.Candidates
}
var RankingRequest_Options_DEFAULT *RequestOptions
func (p *RankingRequest) GetOptions() *RequestOptions {
  if !p.IsSetOptions() {
    return RankingRequest_Options_DEFAULT
  }
return p.Options
}
func (p *RankingRequest) IsSetContext() bool {
  return p.Context != nil
}

func (p *RankingRequest) IsSetOptions() bool {
  return p.Options != nil
}

func (p *RankingRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RankingRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.Context = &Entity{}
  if err := p.Context.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Context), err)
  }
  return nil
}

func (p *RankingRequest)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Entity, 0, size)
  p.Candidates =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &Entity{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Candidates = append(p.Candidates, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RankingRequest)  ReadField3(iprot thrift.TProtocol) error {
  p.Options = &RequestOptions{}
  if err := p.Options.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Options), err)
  }
  return nil
}

func (p *RankingRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RankingRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RankingRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("context", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:context: ", p), err) }
  if err := p.Context.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Context), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:context: ", p), err) }
  return err
}

func (p *RankingRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("candidates", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:candidates: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Candidates)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Candidates {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:candidates: ", p), err) }
  return err
}

func (p *RankingRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("options", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:options: ", p), err) }
  if err := p.Options.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Options), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:options: ", p), err) }
  return err
}

func (p *RankingRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RankingRequest(%+v)", *p)
}

// Attributes:
//  - ID
//  - Features
//  - Score
type Entity struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  Features map[string]*Feature `thrift:"features,2" db:"features" json:"features"`
  Score float64 `thrift:"score,3" db:"score" json:"score"`
}

func NewEntity() *Entity {
  return &Entity{}
}


func (p *Entity) GetID() string {
  return p.ID
}

func (p *Entity) GetFeatures() map[string]*Feature {
  return p.Features
}

func (p *Entity) GetScore() float64 {
  return p.Score
}
func (p *Entity) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Entity)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Entity)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Feature, size)
  p.Features =  tMap
  for i := 0; i < size; i ++ {
var _key1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key1 = v
}
    _val2 := &Feature{}
    if err := _val2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val2), err)
    }
    p.Features[_key1] = _val2
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Entity)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Score = v
}
  return nil
}

func (p *Entity) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Entity"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Entity) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Entity) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("features", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:features: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Features)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Features {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:features: ", p), err) }
  return err
}

func (p *Entity) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("score", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:score: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Score)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.score (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:score: ", p), err) }
  return err
}

func (p *Entity) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Entity(%+v)", *p)
}

// Attributes:
//  - AsString
//  - AsInt
//  - AsFloat
//  - AsBool
//  - AsStringArray
//  - AsIntArray
//  - ValueSelection
type Feature struct {
  AsString string `thrift:"as_string,1" db:"as_string" json:"as_string"`
  AsInt int64 `thrift:"as_int,2" db:"as_int" json:"as_int"`
  AsFloat float64 `thrift:"as_float,3" db:"as_float" json:"as_float"`
  AsBool bool `thrift:"as_bool,4" db:"as_bool" json:"as_bool"`
  AsStringArray *StringArray `thrift:"as_string_array,5" db:"as_string_array" json:"as_string_array"`
  AsIntArray *IntArray `thrift:"as_int_array,6" db:"as_int_array" json:"as_int_array"`
  // unused fields # 7 to 998
  ValueSelection FeatureValue `thrift:"ValueSelection,999" db:"ValueSelection" json:"ValueSelection"`
}

func NewFeature() *Feature {
  return &Feature{}
}


func (p *Feature) GetAsString() string {
  return p.AsString
}

func (p *Feature) GetAsInt() int64 {
  return p.AsInt
}

func (p *Feature) GetAsFloat() float64 {
  return p.AsFloat
}

func (p *Feature) GetAsBool() bool {
  return p.AsBool
}
var Feature_AsStringArray_DEFAULT *StringArray
func (p *Feature) GetAsStringArray() *StringArray {
  if !p.IsSetAsStringArray() {
    return Feature_AsStringArray_DEFAULT
  }
return p.AsStringArray
}
var Feature_AsIntArray_DEFAULT *IntArray
func (p *Feature) GetAsIntArray() *IntArray {
  if !p.IsSetAsIntArray() {
    return Feature_AsIntArray_DEFAULT
  }
return p.AsIntArray
}

func (p *Feature) GetValueSelection() FeatureValue {
  return p.ValueSelection
}
func (p *Feature) IsSetAsStringArray() bool {
  return p.AsStringArray != nil
}

func (p *Feature) IsSetAsIntArray() bool {
  return p.AsIntArray != nil
}

func (p *Feature) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 999:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField999(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Feature)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AsString = v
}
  return nil
}

func (p *Feature)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AsInt = v
}
  return nil
}

func (p *Feature)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AsFloat = v
}
  return nil
}

func (p *Feature)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AsBool = v
}
  return nil
}

func (p *Feature)  ReadField5(iprot thrift.TProtocol) error {
  p.AsStringArray = &StringArray{}
  if err := p.AsStringArray.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AsStringArray), err)
  }
  return nil
}

func (p *Feature)  ReadField6(iprot thrift.TProtocol) error {
  p.AsIntArray = &IntArray{}
  if err := p.AsIntArray.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AsIntArray), err)
  }
  return nil
}

func (p *Feature)  ReadField999(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 999: ", err)
} else {
  temp := FeatureValue(v)
  p.ValueSelection = temp
}
  return nil
}

func (p *Feature) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Feature"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField999(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Feature) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("as_string", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:as_string: ", p), err) }
  if err := oprot.WriteString(string(p.AsString)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.as_string (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:as_string: ", p), err) }
  return err
}

func (p *Feature) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("as_int", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:as_int: ", p), err) }
  if err := oprot.WriteI64(int64(p.AsInt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.as_int (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:as_int: ", p), err) }
  return err
}

func (p *Feature) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("as_float", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:as_float: ", p), err) }
  if err := oprot.WriteDouble(float64(p.AsFloat)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.as_float (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:as_float: ", p), err) }
  return err
}

func (p *Feature) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("as_bool", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:as_bool: ", p), err) }
  if err := oprot.WriteBool(bool(p.AsBool)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.as_bool (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:as_bool: ", p), err) }
  return err
}

func (p *Feature) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("as_string_array", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:as_string_array: ", p), err) }
  if err := p.AsStringArray.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AsStringArray), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:as_string_array: ", p), err) }
  return err
}

func (p *Feature) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("as_int_array", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:as_int_array: ", p), err) }
  if err := p.AsIntArray.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AsIntArray), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:as_int_array: ", p), err) }
  return err
}

func (p *Feature) writeField999(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ValueSelection", thrift.I32, 999); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 999:ValueSelection: ", p), err) }
  if err := oprot.WriteI32(int32(p.ValueSelection)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ValueSelection (999) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 999:ValueSelection: ", p), err) }
  return err
}

func (p *Feature) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Feature(%+v)", *p)
}

// Attributes:
//  - Value
type StringArray struct {
  Value []string `thrift:"value,1" db:"value" json:"value"`
}

func NewStringArray() *StringArray {
  return &StringArray{}
}


func (p *StringArray) GetValue() []string {
  return p.Value
}
func (p *StringArray) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StringArray)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Value =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.Value = append(p.Value, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *StringArray) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StringArray"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StringArray) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Value)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Value {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err) }
  return err
}

func (p *StringArray) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StringArray(%+v)", *p)
}

// Attributes:
//  - Value
type IntArray struct {
  Value []int64 `thrift:"value,1" db:"value" json:"value"`
}

func NewIntArray() *IntArray {
  return &IntArray{}
}


func (p *IntArray) GetValue() []int64 {
  return p.Value
}
func (p *IntArray) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntArray)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Value =  tSlice
  for i := 0; i < size; i ++ {
var _elem4 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem4 = v
}
    p.Value = append(p.Value, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IntArray) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("IntArray"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntArray) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.Value)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Value {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err) }
  return err
}

func (p *IntArray) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntArray(%+v)", *p)
}

// Attributes:
//  - Limit
type RequestOptions struct {
  Limit int32 `thrift:"limit,1" db:"limit" json:"limit"`
}

func NewRequestOptions() *RequestOptions {
  return &RequestOptions{}
}


func (p *RequestOptions) GetLimit() int32 {
  return p.Limit
}
func (p *RequestOptions) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RequestOptions)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *RequestOptions) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RequestOptions"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RequestOptions) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limit", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:limit: ", p), err) }
  if err := oprot.WriteI32(int32(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:limit: ", p), err) }
  return err
}

func (p *RequestOptions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestOptions(%+v)", *p)
}

type Ranking interface {
  baseplate.BaseplateService

  // Parameters:
  //  - Request
  Rank(ctx context.Context, request *RankingRequest) (r *RankingRequest, err error)
}

type RankingClient struct {
  *baseplate.BaseplateServiceClient
}

func NewRankingClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RankingClient {
  return &RankingClient{BaseplateServiceClient: baseplate.NewBaseplateServiceClientFactory(t, f)}}

func NewRankingClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RankingClient {
  return &RankingClient{BaseplateServiceClient: baseplate.NewBaseplateServiceClientProtocol(t, iprot, oprot)}
}

func NewRankingClient(c thrift.TClient) *RankingClient {
  return &RankingClient{
    BaseplateServiceClient: baseplate.NewBaseplateServiceClient(c),
  }
}

// Parameters:
//  - Request
func (p *RankingClient) Rank(ctx context.Context, request *RankingRequest) (r *RankingRequest, err error) {
  var _args5 RankingRankArgs
  _args5.Request = request
  var _result6 RankingRankResult
  if err = p.Client_().Call(ctx, "Rank", &_args5, &_result6); err != nil {
    return
  }
  return _result6.GetSuccess(), nil
}

type RankingProcessor struct {
  *baseplate.BaseplateServiceProcessor
}

func NewRankingProcessor(handler Ranking) *RankingProcessor {
  self7 := &RankingProcessor{baseplate.NewBaseplateServiceProcessor(handler)}
  self7.AddToProcessorMap("Rank", &rankingProcessorRank{handler:handler})
  return self7
}

type rankingProcessorRank struct {
  handler Ranking
}

func (p *rankingProcessorRank) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RankingRankArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Rank", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RankingRankResult{}
var retval *RankingRequest
  var err2 error
  if retval, err2 = p.handler.Rank(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Rank: " + err2.Error())
    oprot.WriteMessageBegin("Rank", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Rank", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type RankingRankArgs struct {
  Request *RankingRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewRankingRankArgs() *RankingRankArgs {
  return &RankingRankArgs{}
}

var RankingRankArgs_Request_DEFAULT *RankingRequest
func (p *RankingRankArgs) GetRequest() *RankingRequest {
  if !p.IsSetRequest() {
    return RankingRankArgs_Request_DEFAULT
  }
return p.Request
}
func (p *RankingRankArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *RankingRankArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RankingRankArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &RankingRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *RankingRankArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Rank_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RankingRankArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *RankingRankArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RankingRankArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RankingRankResult struct {
  Success *RankingRequest `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRankingRankResult() *RankingRankResult {
  return &RankingRankResult{}
}

var RankingRankResult_Success_DEFAULT *RankingRequest
func (p *RankingRankResult) GetSuccess() *RankingRequest {
  if !p.IsSetSuccess() {
    return RankingRankResult_Success_DEFAULT
  }
return p.Success
}
func (p *RankingRankResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RankingRankResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RankingRankResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RankingRequest{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RankingRankResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Rank_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RankingRankResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RankingRankResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RankingRankResult(%+v)", *p)
}


